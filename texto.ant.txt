
## DemoQA Frontend Automation Challenge
Automação de testes end-to-end do site DemoQA utilizando Cypress, Cucumber (BDD) e o padrão Page Object Model. O projeto cobre cenários de preenchimento de formulário, upload de arquivos, validação de popups e uso de dados dinâmicos.

##    Sumário
###    Sobre o Projeto
###    Tecnologias Utilizadas
###    Pré-requisitos
###    Instalação
###    Estrutura do Projeto
###    Como Executar os Testes
###    Explicação dos Arquivos Principais
###    Boas Práticas e Padrões
###    Contribuindo
###    Licença
#### Sobre o Projeto
Este projeto foi desenvolvido como parte de um desafio técnico para automação de testes frontend. O objetivo é demonstrar habilidades em automação utilizando Cypress, integração com Cucumber para BDD, organização do código com Page Object Model e uso de dados dinâmicos via fixtures.

### Tecnologias Utilizadas
Cypress - Framework de automação de testes E2E
Cucumber - BDD com Gherkin
@badeball/cypress-cucumber-preprocessor - Integração Cypress + Cucumber
cypress-file-upload - Upload de arquivos
@4tw/cypress-drag-drop - Drag and Drop para Cypress
Node.js (versão recomendada: >= 16)
### Pré-requisitos
Node.js instalado (download aqui)
npm (geralmente já incluso no Node.js)
Git (opcional, para versionamento)
### Instalação
Clone o repositório:

bash

git clone https://github.com/seuusuario/DesafioQA_Front.git
cd DesafioQA_Front
Instale as dependências do projeto:

bash

npm install
### Estrutura do Projeto
text

DesafioQA_Front/
├── cypress/
│   ├── e2e/
│   │   ├── features/           # Arquivos .feature (Cucumber)
│   │   │   └── forms.feature
│   │   ├── pageObjects/        # Page Objects (POM)
│   │   │   └── formsPage.cy.js
│   │   └── stepDefinitions/    # Step Definitions (Cucumber)
│   │       └── formsSteps.cy.js
│   ├── fixtures/               # Dados de teste e arquivos para upload
│   │   ├── randomUser.json
│   │   ├── users.json
│   │   └── uploadFile.txt
│   ├── support/                # Comandos customizados e setup
│   │   ├── commands.js
│   │   └── e2e.js
│   └── screenshots/            # Evidências de execução
├── cypress.config.js           # Configuração do Cypress
├── package.json                # Dependências e scripts
├── README.md                   # Este arquivo
### Como Executar os Testes
Modo Interativo (GUI)
bash

npx cypress open
Selecione o cenário desejado no Test Runner.

Modo Headless (Terminal)
bash

npx cypress run
### Explicação dos Arquivos Principais
1. cypress/e2e/features/forms.feature
Arquivo Gherkin que descreve o cenário de preenchimento do formulário, upload de arquivo e verificação do popup de confirmação, em linguagem natural.

2. cypress/e2e/stepDefinitions/formsSteps.cy.js
Implementa cada passo do arquivo .feature, utilizando Cypress para executar as ações no navegador. Usa Page Object para manter o código limpo e reutilizável.

3. cypress/e2e/pageObjects/formsPage.cy.js
Encapsula as interações com a página de formulário (Practice Form) do DemoQA. Segue o padrão Page Object Model, facilitando manutenção e reuso.

4. cypress/fixtures/randomUser.json e users.json
Arquivos com dados de usuários para preencher o formulário de forma dinâmica e flexível.

5. cypress/fixtures/uploadFile.txt
Arquivo de texto utilizado para testar o upload no formulário. Este arquivo deve estar presente no repositório.

6. cypress.config.js
Arquivo de configuração do Cypress, incluindo o baseUrl do DemoQA e o padrão de localização dos arquivos de teste.

### Boas Práticas e Padrões
Page Object Model: Facilita a manutenção e reutilização do código.
BDD com Cucumber: Torna os cenários de teste mais legíveis e próximos da linguagem de negócio.
Fixtures: Permitem fácil troca de dados de teste.
Comandos customizados: Centralizam ações repetitivas.
Documentação e comentários: Todos os métodos e classes possuem documentação XML/JSDoc e comentários detalhados inline.
Testes unitários: Para métodos utilitários, recomenda-se criar testes unitários para garantir robustez.
### Contribuindo
Fork este repositório
Crie uma branch para sua feature (git checkout -b minha-feature)
Commit suas alterações (git commit -am 'Adiciona nova feature')
Push para a branch (git push origin minha-feature)
Abra um Pull Request
### Licença
Este projeto está sob a licença MIT.

### Dúvidas?
Abra uma issue ou entre em contato pelo GitHub!



